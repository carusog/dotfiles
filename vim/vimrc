" .vimrc ----------------------------------------------------------------- {{{
"
" Author: Giuseppe Caruso <giuseppe@bonsai-studio.net>
" Source: https://github.com/carusog/dotfiles
"
" }}}
" be iMproved ------------------------------------------------------------ {{{

set nocompatible    " set Vim not to be compatible with Vi
let mapleader=","   " change the leader to be a comma vs slash
filetype off
set autoread
set autoindent
set ignorecase
set smartcase
set encoding=UTF-8
set hidden
set autowriteall

" fix default vimrc modelines value when $VIM,
" for some reason, in not set so system vimrc 
" falls back to /usr/share/vim/vimrc
set modelines=5     

" Better search with, E.G., :find [betterSearch]
set wildmode=list:full " Shows results in a vertical list
set wildignorecase     " Case insensitive search
"" Ignored folders
set wildignore=*.swp,*.bak
set wildignore+=*.pyc,*.class,*.sln,*.Master,*.csproj,*.csproj.user,*.cache,*.dll,*.pdb,*.min.*
set wildignore+=*/node_modules/**/*
set wildignore+=*/.git/**/*,*/.hg/**/*,*/.svn/**/*
set wildignore+=tags
set wildignore+=*.tar.*
set wildignore+=*/bower_components/**/*
set wildignore+=*/dist/**/*
set wildignore+=*/public/static/**/* " Gatsby dist folder
" }}}
" VIM-PLUG BLOCK --------------------------------------------------------- {{{
" vim-plug is a very nice, minimalistic Vim plugin manager you can find at
" https://github.com/junegunn/vim-plug
" ----------------------------------------------------------------------------

call plug#begin('~/.vim/plugged')

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
" set Rgp command to use Rg with bat preview
command! -bang -nargs=* Rgp call fzf#vim#grep("rg --column --line-number --no-heading --color=always --smart-case ".shellescape(<q-args>), 1, fzf#vim#with_preview(), <bang>0)


" Browsing
" -----------------------------------------------------------------------------
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
  let NERDTreeShowBookmarks = 1
  let NERDTreeChDirMode = 2
Plug 'ctrlpvim/ctrlp.vim'
  let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
  let g:ctrlp_custom_ignore = 'node_modules'
Plug 'jlanzarotta/bufexplorer'
Plug 'ryanoasis/vim-devicons'

" Colors
" -----------------------------------------------------------------------------
Plug 'arcticicestudio/nord-vim'
Plug 'morhetz/gruvbox'
Plug 'dracula/vim', { 'as': 'dracula' }
Plug 'vwxyutarooo/nerdtree-devicons-syntax'
Plug 'shinchu/lightline-gruvbox.vim'

" Editing
" -----------------------------------------------------------------------------
Plug 'editorconfig/editorconfig-vim'
Plug 'mattn/emmet-vim'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'scrooloose/nerdcommenter'
Plug 'junegunn/goyo.vim'

" Utilities
" -----------------------------------------------------------------------------
Plug 'tpope/vim-unimpaired'     " Just because of `]b/[b` for next/prev buffer

" Javascript
" -----------------------------------------------------------------------------
Plug 'pangloss/vim-javascript'

" Nginx
" -----------------------------------------------------------------------------
Plug 'chr4/nginx.vim'

" Fancier status bar
" -----------------------------------------------------------------------------
Plug 'itchyny/lightline.vim'
let g:lightline = {
\    'colorscheme': 'dracula',
\    'active': {
\        'left': [ [ 'mode', 'paste' ], [ 'gitbranch', 'readonly', 'filenameOrLastFolderOfIndex', 'modified' ] ]
\    },
\    'component_function': {
\        'gitbranch': 'fugitive#head',
\        'filenameOrLastFolderOfIndex': 'LightLineFixIndexFiles'
\    },
\}
function! LightLineFixIndexFiles()
    let filenameonly = expand('%:t:r')
    if filenameonly ==? "index"
        return remove(split(expand("%:h"), "/"), -1) . "/" . expand("%:t")
    else 
        return expand("%:t")
    endif
endfunction

" Git
" -----------------------------------------------------------------------------
Plug 'tpope/vim-fugitive'
Plug 'mhinz/vim-signify'
Plug 'xuyuanp/nerdtree-git-plugin'

" Languages
" -----------------------------------------------------------------------------
Plug 'sheerun/vim-polyglot'
Plug 'lumiliet/vim-twig'
Plug 'mustache/vim-mustache-handlebars' 
" {{{
let g:mustache_abbreviations = 1
" }}}

call plug#end()

filetype plugin indent on

" }}}
" GUI -------------------------------------------------------------------- {{{

set expandtab
set background=dark
set number
set relativenumber
set noshowmode
set laststatus=2
set nowrap
set scrolloff=5         " keep the cursor at least 5 lines from window border [visibleLines]
set termguicolors
set t_Co=256            " try to fix color issues in terminal
syntax on
set equalalways
set cursorline
" highlight text overflowing text without setting textwidth or wrap [overlength]
augroup vimrc_autocmds
  autocm BufEnter * highlight OverLength ctermbg=black guibg=black
  autocmd BufEnter * match OverLength /\%75v.*/
augroup END

" set up cursor when in insert mode to bar
" when normal mode to block [cursor] {{{
"
" Ps = 0  -> blinking block
" Ps = 1  -> blinking block (default)
" Ps = 2  -> steady block
" Ps = 3  -> blinking underline
" Ps = 4  -> steady underline
" Ps = 5  -> blinking bar (xterm)
" Ps = 6  -> steady bar (xterm)
" }}}
let &t_SI = "\e[6 q"
let &t_EI = "\e[2 q"

" https://stackoverflow.com/a/6489348/877464
" autocmd InsertEnter,InsertLeave * set cul!

set guifont=Furacode\ Nerd\ Font:h16

" Dracula theme {{{
" -----------------------------------------------
let g:dracula_italic = 0
colorscheme dracula
highlight Normal ctermbg=None
" }}}
" Nord theme {{{
" -----------------------------------------------
"silent! colorscheme nord
"let g:nord_italic = 1
"let g:nord_underline = 1
"let g:nord_cursor_line_number_background = 1
"hi Search guibg=peru guifg=wheat
" }}}
" gruvbox theme {{{
" -----------------------------------------------
"silent! colorscheme gruvbox
"let g:lightline = { 'colorscheme': 'gruvbox' }
" }}}

if has('gui_running')
  set macligatures
endif

set hlsearch
set incsearch

" Better invisible characters
set listchars=eol:$,tab:>-,trail:~,extends:>,precedes:<,nbsp:+
" }}}
" MAPPINGS --------------------------------------------------------------- {{{

" Toggle foldings
noremap <space> za
" hide search results highlight
noremap <leader><space> :noh<cr> 
" http://vim.wikia.com/wiki/Avoid_the_escape_key
inoremap jj <Esc>
inoremap JJ <Esc>

nnoremap <leader><leader> :wa<cr>

nnoremap <leader>sv :source $MYVIMRC<cr>
nnoremap <leader>ev :edit $MYVIMRC<cr>

nnoremap <leader>ntt :NERDTreeToggle<CR>

" Better search (see above)
"" Correctly set path to search in current folder recursively
" set path=.,** 
" nnoremap <leader>f :find *
" nnoremap <leader>s :sfind *
" nnoremap <leader>v :vert sfind *
" nnoremap <leader>t :tabfind *

" Windows splits
" (Each symbol is what you actually get by pressing Alt+char)
" Maps Alt-[h,j,k,l] to resizing a window split
nnoremap <silent> <Left>  <C-w>>
nnoremap <silent> <Up>    <C-W>+
nnoremap <silent> <Down>  <C-W>-
nnoremap <silent> <Right> <C-w><
" Maps Shift+Alt-[h,j,k,l] to resizing a window split 10 times
nnoremap <silent> <S-Left>  <C-w>10>
nnoremap <silent> <S-Up>    <C-W>10+
nnoremap <silent> <S-Down>  <C-W>10-
nnoremap <silent> <S-Right> <C-w>10<
" Makes all split same size
nnoremap <silent> ≠ <C-w>=
" Maps Alt-[s.v] to horizontal and vertical split respectively
nnoremap <silent> ß :split<CR>
nnoremap <silent> √ :vsplit<CR>
" Maps arrow keys for moving between windows
nnoremap <silent> ˙ <C-w><C-h>
nnoremap <silent> ∆ <C-w><C-j>
nnoremap <silent> ˚ <C-w><C-k>
nnoremap <silent> ¬ <C-w><C-l>
" Maps Alt-[n,p] for moving next and previous window respectively
nnoremap <silent> ‘ <C-w><C-w>
nnoremap <silent> “ <C-w><S-w>

nnoremap <leader>l :set list!<CR>

nnoremap - ddkP
nnoremap + ddp
" }}}
" Vim -------------------------------------------------------------------- {{{

augroup ft_vim
    au!
    " set help pages to a width of 78 characters
    au FileType help setlocal textwidth=78
    " open help text in a window to the right of current file
    au BufWinEnter *.txt if &ft == 'help' | wincmd L | endif 
    "au FileType vim inoremap <c-n> <c-x><c-n>
augroup END

" }}}
" Sources ---------------------------------------------------------------- {{{
" [cursor]          https://stackoverflow.com/a/42118416/877464
" [betterSearch]    https://stackoverflow.com/a/16084326/877464
" [visibleLines]    https://vim.fandom.com/wiki/Make_search_results_appear_in_the_middle_of_the_screen
" [overlength]      https://stackoverflow.com/questions/395114/vim-syntax-coloring-how-do-i-highlight-long-lines-only/10993757#10993757
" }}}
" vim: ft=vim:foldmethod=marker:tabstop=4:shiftwidth=4:expandtab

" .vimrc ----------------------------------------------------------------- {{{
"
" Author: Giuseppe Caruso <giuseppe@bonsai-studio.net>
" Source: https://github.com/carusog/dotfiles
"
" }}}
" be iMproved ------------------------------------------------------------ {{{

set nocompatible    " set Vim not to be compatible with Vi
let mapleader=","   " change the leader to be a comma vs slash
filetype off
set autoread
set autoindent
set ignorecase
set smartcase
set encoding=UTF-8
set hidden
set autowriteall

" fix default vimrc modelines value when $VIM,
" for some reason, in not set so system vimrc 
" falls back to /usr/share/vim/vimrc
set modelines=5     

" Better search with, E.G., :find [betterSearch]
set wildmode=list:full " Shows results in a vertical list
set wildignorecase     " Case insensitive search
"" Ignored folders
set wildignore=*.swp,*.bak
set wildignore+=*.pyc,*.class,*.sln,*.Master,*.csproj,*.csproj.user,*.cache,*.dll,*.pdb,*.min.*
set wildignore+=*/node_modules/**/*
set wildignore+=*/.git/**/*,*/.hg/**/*,*/.svn/**/*
set wildignore+=tags
set wildignore+=*.tar.*
set wildignore+=*/bower_components/**/*
set wildignore+=*/dist/**/*
set wildignore+=*/public/static/**/* " Gatsby dist folder
" }}}
" VIM-PLUG BLOCK --------------------------------------------------------- {{{
" vim-plug is a very nice, minimalistic Vim plugin manager you can find at
" https://github.com/junegunn/vim-plug
" ----------------------------------------------------------------------------

call plug#begin('~/.vim/plugged')

" Use CoC release branch (Recommended)
Plug 'neoclide/coc.nvim', {'branch': 'release'}

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

" Browsing
" ------------------------------------------------------------------------- {{{
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
  let NERDTreeShowBookmarks = 1
  let NERDTreeChDirMode = 2
Plug 'ctrlpvim/ctrlp.vim'
  let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
  let g:ctrlp_custom_ignore = 'node_modules'
Plug 'jlanzarotta/bufexplorer'
" /Browsing }}}

" Colors
" ------------------------------------------------------------------------- {{{
Plug 'arcticicestudio/nord-vim'
Plug 'morhetz/gruvbox'
Plug 'shinchu/lightline-gruvbox.vim'
Plug 'dracula/vim', { 'as': 'dracula' }
Plug 'junegunn/seoul256.vim'
Plug 'nightsense/cosmic_latte'
" /Colors }}}

" Editing
" ------------------------------------------------------------------------- {{{
Plug 'editorconfig/editorconfig-vim'
Plug 'mattn/emmet-vim'
" Emmet settings {{{
let g:user_emmet_leader_key = '<C-E>'
let g:user_emmet_expandabbr_key = '<C-E>' " which is equivalent to <C-e><C-e>
" /Emmet settings }}}
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'scrooloose/nerdcommenter'
Plug 'junegunn/goyo.vim'
" /Editing }}}

" Utilities
" ------------------------------------------------------------------------- {{{
Plug 'tpope/vim-unimpaired'     " Just because of `]b/[b` for next/prev buffer
Plug 'junegunn/vim-emoji'       " Emojy in VIM
" /Utilities }}}

" Javascript
" -----------------------------------------------------------------------------
Plug 'pangloss/vim-javascript'

" Nginx
" -----------------------------------------------------------------------------
Plug 'chr4/nginx.vim'

" Fancier status bar
" -----------------------------------------------------------------------------
Plug 'itchyny/lightline.vim'
" Lightline settings {{{
let g:lightline = {
\    'colorscheme': 'dracula',
\    'active': {
\        'left': [ [ 'mode', 'paste' ], [ 'gitbranch', 'readonly', 'filenameOrLastFolderOfIndex', 'modified' ] ]
\    },
\    'component_function': {
\        'gitbranch': 'fugitive#head',
\        'filenameOrLastFolderOfIndex': 'LightLineFixIndexFiles'
\    },
\}
function! LightLineFixIndexFiles()
    let filenameonly = expand('%:t:r')
    if filenameonly ==? "index"
        return remove(split(expand("%:h"), "/"), -1) . "/" . expand("%:t")
    else 
        return expand("%:t")
    endif
endfunction
" /Lightline settings }}}

" Git
" ------------------------------------------------------------------------- {{{
Plug 'tpope/vim-fugitive'
Plug 'mhinz/vim-signify'
" /Git }}}

" Languages
" ------------------------------------------------------------------------- {{{
Plug 'sheerun/vim-polyglot'
Plug 'lumiliet/vim-twig'
Plug 'mustache/vim-mustache-handlebars' 
" handlebars settings {{{
let g:mustache_abbreviations = 1
" /handlebars settings }}}
" /Languages }}}

call plug#end()

filetype plugin indent on

" }}}
" CoC required settings {{{

call coc#add_extension(
            \ 'coc-json',
            \ 'coc-tsserver',
            \ 'coc-html',
            \ 'coc-css',
            \ 'coc-ember',
            \ 'coc-snippets',
            \ 'coc-pairs',
            \ 'coc-highlight',
            \ )

set nobackup
set nowritebackup
set cmdheight=2     " better display for messages
set updatetime=300 " it looks like it breaks messages
set shortmess+=c
set signcolumn=yes

" Use <CR> to confirm completion, 
" `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" Or use `complete_info` if your vim support it, like:
" inoremap <expr> <CR> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
" is the Pop Up Menu open?
  " is menu item a snippet?
    " expand it
    " oterwise cycle through suggenstions
inoremap <silent><expr> <TAB>
      \ pumvisible()
      \ ?  coc#expandableOrJumpable()
            \ ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>"
            \ : "\<C-n>"
      \ : <SID>check_back_space()
            \ ? "\<TAB>"
            \ : coc#refresh()

inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

let g:coc_snippet_next = '<tab>'

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region,
" ex: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Create mappings for function text object, 
" requires document symbols feature of languageserver.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use <C-d> for select selections ranges,
" needs server support, like: coc-tsserver, coc-python
" mmmh, nope. It's just a joke: https://github.com/neoclide/coc.nvim/issues/1000
"nmap <silent> <C-d> <Plug>(coc-range-select)
"xmap <silent> <C-d> <Plug>(coc-range-select)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add status line support, for integration with other plugin, checkout `:h coc-status`
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Using CocList
" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<CR>
" Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<CR>
" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<CR>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<CR>
" Search workspace symbols
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<CR>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>
" }}} end of CoC required settings
" GUI -------------------------------------------------------------------- {{{

set expandtab
set background=dark
set number
set relativenumber
set noshowmode
set laststatus=2
set nowrap
set scrolloff=5         " keep the cursor at least 5 lines from window border [visibleLines]
set termguicolors
set t_Co=256            " try to fix color issues in terminal
syntax on
set equalalways
set cursorline
" highlight text overflowing text without setting textwidth or wrap [overlength]
augroup vimrc_autocmds
  autocm BufEnter * highlight OverLength ctermbg=black guibg=black
  autocmd BufEnter * match OverLength /\%81v.*/
augroup END

" set up cursor when in insert mode to bar
" when normal mode to block [cursor] {{{
"
" Ps = 0  -> blinking block
" Ps = 1  -> blinking block (default)
" Ps = 2  -> steady block
" Ps = 3  -> blinking underline
" Ps = 4  -> steady underline
" Ps = 5  -> blinking bar (xterm)
" Ps = 6  -> steady bar (xterm)
" }}}
let &t_SI = "\e[6 q"
let &t_EI = "\e[2 q"

" https://stackoverflow.com/a/6489348/877464
" autocmd InsertEnter,InsertLeave * set cul!

set guifont=Furacode\ Nerd\ Font:h16

" -----------------------------------------------
" Dracula theme {{{
" -----------------------------------------------
"colorscheme dracula
" let g:dracula_italic = 0
"highlight Normal ctermbg=None
" }}}
" -----------------------------------------------
" Nord theme {{{
" -----------------------------------------------
"silent! colorscheme nord
"let g:nord_italic = 1
"let g:nord_underline = 1
"let g:nord_cursor_line_number_background = 1
"hi Search guibg=peru guifg=wheat
" }}}
" -----------------------------------------------
" gruvbox theme {{{
" -----------------------------------------------
"silent! colorscheme gruvbox
"let g:lightline = { 'colorscheme': 'gruvbox' }
" }}}
" -----------------------------------------------
" Seoul256 {{{
" -----------------------------------------------
" dark:
"   Range:   233 (darkest) ~ 239 (lightest)
"   Default: 237
let g:seoul256_background = 234

" light:
"   Range:   252 (darkest) ~ 256 (lightest)
"   Default: 253
let g:seoul256_light_background = 253

colorscheme seoul256
" }}}
" -----------------------------------------------

if has('gui_running')
  set macligatures
endif

set hlsearch
set incsearch

" Better invisible characters
set listchars=eol:$,tab:>-,trail:~,extends:>,precedes:<,nbsp:+

" set Rgp command to use Rg with bat preview
command! -bang -nargs=* Rgp 
    \ call fzf#vim#grep("rg 
    \ --column 
    \ --line-number 
    \ --no-heading 
    \ --color=always 
    \ --smart-case 
    \ ".shellescape(<q-args>), 1, fzf#vim#with_preview(), <bang>0)

" Custom indicators for nerdtree-git-plugin {{{
if emoji#available()
    let g:NERDTreeIndicatorMapCustom = {
        \ "Modified"  : emoji#for('zap'),
        \ "Staged"    : emoji#for('rocket'),
        \ "Dirty"     : "~",
        \ }
endif
" /Custom indicators }}}
" }}}
" MAPPINGS --------------------------------------------------------------- {{{

" Toggle foldings
noremap <space><space> za
" hide search results highlight
noremap <leader><space> :noh<CR> 
" http://vim.wikia.com/wiki/Avoid_the_escape_key
inoremap jj <Esc>
inoremap JJ <Esc>

nnoremap <leader><leader> :wa<CR>

nnoremap <leader>sv :source $MYVIMRC<CR>
nnoremap <leader>ev :edit $MYVIMRC<CR>

nnoremap <leader>nt :NERDTreeToggle<CR>
nnoremap <leader>nf :NERDTreeFind<CR>

" Better search (see above)
"" Correctly set path to search in current folder recursively
" set path=.,** 
" nnoremap <leader>f :find *
" nnoremap <leader>s :sfind *
" nnoremap <leader>v :vert sfind *
" nnoremap <leader>t :tabfind *

" Windows splits
" (Each symbol is what you actually get by pressing Alt+char)
" Maps Alt-[h,j,k,l] to resizing a window split
nnoremap <silent> <Left>  <C-w>>
nnoremap <silent> <Up>    <C-W>+
nnoremap <silent> <Down>  <C-W>-
nnoremap <silent> <Right> <C-w><
" Maps Shift+Alt-[h,j,k,l] to resizing a window split 10 times
nnoremap <silent> <S-Left>  <C-w>10>
nnoremap <silent> <S-Up>    <C-W>10+
nnoremap <silent> <S-Down>  <C-W>10-
nnoremap <silent> <S-Right> <C-w>10<
" Makes all split same size
nnoremap <silent> ≠ <C-w>=
" Maps Alt-[s.v] to horizontal and vertical split respectively
nnoremap <silent> ß :split<CR>
nnoremap <silent> √ :vsplit<CR>
" Maps arrow keys for moving between windows
nnoremap <silent> ˙ <C-w><C-h>
nnoremap <silent> ∆ <C-w><C-j>
nnoremap <silent> ˚ <C-w><C-k>
nnoremap <silent> ¬ <C-w><C-l>
" Maps Alt-[n,p] for moving next and previous window respectively
nnoremap <silent> ‘ <C-w><C-w>
nnoremap <silent> “ <C-w><S-w>

nnoremap <leader>l :set list!<CR>

nnoremap - ddkP
nnoremap + ddp

" }}}
" Vim -------------------------------------------------------------------- {{{

augroup ft_vim
    au!
    " set help pages to a width of 80 characters
    au FileType help setlocal textwidth=80
    " open help text in a window to the right of current file
    au BufWinEnter *.txt if &ft == 'help' | wincmd L | endif 
    "au FileType vim inoremap <c-n> <c-x><c-n>
augroup END

" }}}
" Sources ---------------------------------------------------------------- {{{
" [cursor]          https://stackoverflow.com/a/42118416/877464
" [betterSearch]    https://stackoverflow.com/a/16084326/877464
" [visibleLines]    https://vim.fandom.com/wiki/Make_search_results_appear_in_the_middle_of_the_screen
" [overlength]      https://stackoverflow.com/questions/395114/vim-syntax-coloring-how-do-i-highlight-long-lines-only/10993757#10993757
" }}}
" vim: ft=vim:foldmethod=marker:tabstop=4:shiftwidth=4:expandtab
